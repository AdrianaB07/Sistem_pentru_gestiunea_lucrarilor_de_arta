@model ProductDisplayModel
@{
    ViewData["Title"] = "Home";
}

<div class="container mt-4" style="background-color: white;">
    <div class="row">
        <div class="col-lg-3 mb-4">
            <form asp-action="Index" method="get" class="row g-3 align-items-center" id="filterForm">
                <div class="col-12">
                    <label class="visually-hidden" for="sterm">Search by title or tag</label>
                    <div class="input-group">
                        <div class="input-group-text"><i class="bi bi-search"></i></div>
                        <input type="text" class="form-control" value="@Model.STerm" id="searchInput" name="sterm" placeholder="Search by title or tag" onkeyup="searchFunction()">
                    </div>
                </div>

                <div class="col-12">
                    <label class="visually-hidden" for="categoryId">Categories</label>
                    <select class="form-select" id="categoryId" name="categoryId" onchange="filterProducts()">
                        <option value="0" selected>Category</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option selected="@(category.Id == Model.CategoryId)" value="@category.Id">@category.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="col-12">
                    <label class="visually-hidden" for="sortOrder">Sort by</label>
                    <select class="form-select" id="sortOrder" name="sortOrder" onchange="filterProducts()">
                        <option value="">Sort by</option>
                        <option selected="@(Model.SortOrder == "price_asc")" value="price_asc">Price: Low to High</option>
                        <option selected="@(Model.SortOrder == "price_desc")" value="price_desc">Price: High to Low</option>
                        <option selected="@(Model.SortOrder == "name_asc")" value="name_asc">Name: A to Z</option>
                        <option selected="@(Model.SortOrder == "name_desc")" value="name_desc">Name: Z to A</option>
                    </select>
                </div>

                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="true" id="inStock" name="inStock" @(Model.InStock ? "checked" : "") onchange="filterProducts()">
                        <label class="form-check-label" for="inStock">
                            In Stock
                        </label>
                    </div>
                </div>

                <div class="col-12 d-flex justify-content-between">
                    <div>
                        <button type="submit" class="btn btn-burgundy">Search</button>
                        <a href="/Home/Index" class="btn btn-dark btn-burgundy">Reset</a>
                    </div>
                </div>
            </form>
        </div>

        <div class="col-lg-9">
            <div id="success-message" class="alert alert-success" style="display:none;"></div>
            <div id="product-container" class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var product in Model.Products)
                {
                    <div class="col product-item" data-category="@product.CategoryId" data-title="@product.ProductName" data-tags="@string.Join(',', product.Tags.Select(t => t.Content.ToLower()))">
                        <div class="card h-100 border-0 shadow-sm product-card @((product.IsSold) ? "sold" : "")">
                            <a href="/Product/Details/@product.Id">
                                @if (string.IsNullOrEmpty(product.Image))
                                {
                                    <img style="width:100%;height:180px; object-fit: cover;" src="/images/NoImage.png" class="card-img-top product-img @((product.IsSold) ? "grayscale" : "")" alt="...">
                                }
                                else
                                {
                                    <img style="width:100%;height:180px; object-fit: cover;" src="/images/@product.Image" class="card-img-top product-img @((product.IsSold) ? "grayscale" : "")" alt="...">
                                }
                            </a>
                            <div class="card-body text-center">
                                <h5 class="card-title">@product.ProductName</h5>
                                <p class="card-text">
                                    @product.Price €
                                </p>
                                @if (product.IsSold)
                                {
                                    <span class="sold-label">SOLD</span>
                                }
                                <div class="d-flex justify-content-center align-items-center position-relative btn-container">
                                    <button type="button" onclick="addToCart(@product.Id)" class="btn btn-circle btn-burgundy mr-2" @(product.IsSold ? "disabled" : "")>
                                        <i class="bi bi-cart"></i>
                                    </button>
                                    <button type="button" onclick="addToWishlist(@product.Id)" class="btn btn-circle btn-burgundy">
                                        <i class="bi bi-heart"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Previous" onclick="changePage('prev')">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <li class="page-item">
                        <span class="page-link" id="current-page">1</span>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Next" onclick="changePage('next')">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const productsPerPage = 9;
        let currentPage = 1;
        let debounceTimeout;

        document.addEventListener('DOMContentLoaded', (event) => {
            displayProducts();
        });

        function displayProducts() {
            const productItems = document.querySelectorAll('.product-item');
            const totalProducts = productItems.length;
            const totalPages = Math.ceil(totalProducts / productsPerPage);

            productItems.forEach((item, index) => {
                item.style.display = (index >= (currentPage - 1) * productsPerPage && index < currentPage * productsPerPage) ? 'block' : 'none';
            });

            document.querySelector('.pagination .page-item:first-child').classList.toggle('disabled', currentPage === 1);
            document.querySelector('.pagination .page-item:last-child').classList.toggle('disabled', currentPage === totalPages);

            document.getElementById('current-page').textContent = currentPage;
        }

        function changePage(direction) {
            const productItems = document.querySelectorAll('.product-item');
            const totalProducts = productItems.length;
            const totalPages = Math.ceil(totalProducts / productsPerPage);

            if (direction === 'next' && currentPage < totalPages) {
                currentPage++;
            } else if (direction === 'prev' && currentPage > 1) {
                currentPage--;
            }

            displayProducts();
        }

        function debounceFilterProducts() {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(filterProducts, 300);
        }

        function filterProducts() {
            const form = document.getElementById('filterForm');
            const urlParams = new URLSearchParams(new FormData(form)).toString();
            const baseUrl = '@Url.Action("Index", "Home")';
            window.location.href = `${baseUrl}?${urlParams}`;
        }

        function searchFunction() {
            var input, filter, grid, items, item, i, txtValue;
            input = document.getElementById("searchInput");
            filter = input.value.toLowerCase();
            grid = document.getElementById("productGrid");
            items = grid.getElementsByClassName("product-item");

            for (i = 0; i < items.length; i++) {
                item = items[i];
                txtValue = item.textContent || item.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    item.style.display = "";
                } else {
                    item.style.display = "none";
                }
            }
        }
        async function addToCart(productId) {
            var usernameEl = document.getElementById("username");
            if (usernameEl == null) {
                window.location.href = "/Identity/Account/Login";
            }
            try {
                var response = await fetch(`/Cart/AddItem?productId=${productId}`);
                if (response.status == 200) {
                    var result = await response.json();
                    if (result.success) {
                        var successMessageEl = document.getElementById("success-message");
                        successMessageEl.innerText = result.message;
                        successMessageEl.style.display = "block";
                        successMessageEl.style.backgroundColor = "#B03060";
                        setTimeout(function () {
                            successMessageEl.style.display = "none";
                        }, 3000); // Hide the message after 3 seconds

                        var cartCountEl = document.getElementById("cartCount");
                        if (cartCountEl) {
                            cartCountEl.innerText = result.cartCount;
                        }
                    }
                }
            } catch (err) {
                console.log(err);
            }
        }

        async function addToWishlist(productId) {
            var usernameEl = document.getElementById("username");
            if (usernameEl == null) {
                window.location.href = "/Identity/Account/Login";
            }
            try {
                var response = await fetch(`/Wishlist/AddItem?productId=${productId}`);
                if (response.status == 200) {
                    var result = await response.json();
                    if (result.success) {
                        var successMessageEl = document.getElementById("success-message");
                        successMessageEl.innerText = result.message;
                        successMessageEl.style.display = "block";
                        successMessageEl.style.backgroundColor = "#B03060";
                        setTimeout(function () {
                            successMessageEl.style.display = "none";
                        }, 3000); // Hide the message after 3 seconds

                        var wishlistCountEl = document.getElementById("wishlistCount");
                        if (wishlistCountEl) {
                            wishlistCountEl.innerText = result.wishlistItemCount;
                        }
                    }
                }
            } catch (err) {
                console.log(err);
            }
        }
    </script>
}

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: white; /* Setăm fundalul întregii pagini la alb */
    }

    .container {
        background-color: transparent; /* Fundal alb pentru container */
        padding: 20px;
        border-radius: 8px;
        box-shadow: none; /* Eliminăm umbrele */
    }

    .product-card {
        overflow: hidden;
        position: relative;
    }

    .product-img {
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-img {
        transform: scale(1.1);
    }

    .card-body {
        color: #7a7a7a;
    }

    .card-title {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    .card-text {
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .btn-container {
        margin-top: 20px;
    }

    .btn-circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-burgundy {
        background-color: #800020;
        color: white;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-burgundy:hover {
            background-color: #660018;
        }

        .btn-burgundy:focus,
        .btn-burgundy:active {
            background-color: #4d0012;
        }

    .btn-dark {
        background-color: #333333;
        color: white;
        border: none;
    }

        .btn-dark:hover {
            background-color: #1a1a1a;
        }

        .btn-dark:focus,
        .btn-dark:active {
            background-color: #000000;
        }

    .input-group-text {
        background-color: #800020;
        color: white;
    }

    .form-select {
        border-color: #800020;
    }

        .form-select:focus {
            border-color: #800020;
            box-shadow: 0 0 0 0.2rem rgba(128, 0, 32, 0.25);
        }

    .form-control:focus {
        border-color: #800020;
        box-shadow: 0 0 0 0.2rem rgba(128, 0, 32, 0.25);
    }

    .pagination .page-item.disabled .page-link {
        color: #ddd;
    }

    .pagination .page-item .page-link {
        color: #800020;
        border: none;
        background: none;
    }

        .pagination .page-item .page-link:hover {
            background-color: transparent;
            color: #660018;
        }

        .pagination .page-item .page-link:focus {
            box-shadow: none;
        }

        .pagination .page-item .page-link svg {
            width: 1.5em;
            height: 1.5em;
        }

    .product-card.sold .sold-label {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(128, 0, 32, 0.8);
        color: white;
        padding: 5px 10px;
        font-size: 0.9rem;
        border-radius: 4px;
    }

    .product-card.sold .btn-circle {
        background-color: #ccc;
        pointer-events: none;
    }

        .product-card.sold .btn-circle:hover {
            background-color: #ccc;
        }

    .grayscale {
        filter: grayscale(88%);
    }

    .alert-success {
        color: white;
        background-color: #B03060;
        border-color: #B03060;
    }

    .mr-2 {
        margin-right: 10px;
    }
</style>
